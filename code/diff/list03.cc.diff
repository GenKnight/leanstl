--- list02const.cc
+++ list03.cc
@@ -2,6 +2,7 @@
 
 ///////////////////////////////////////  list.h  ////////////////////////////
 
+#include <assert.h>  // for size_t
 #include <stddef.h>  // for size_t
 #include <utility>   // for std::move
 
@@ -20,8 +21,7 @@
  public:
   list()
   {
-    head_.next = &head_;
-    head_.prev = &head_;
+    init_head();
   }
 
   ~list()
@@ -34,8 +34,23 @@
     }
   }
 
-  list(const list& rhs) = delete;
-  void operator=(const list& rhs) = delete;
+  list(const list& rhs) : list()
+  {
+    for (const T& x: rhs)
+    {
+      push_back(x);
+    }
+  }
+
+  list(list&& rhs) : list() { take_over(rhs); }
+  list& operator=(list rhs) { swap(rhs); return *this; }
+
+  void swap(list& rhs)
+  {
+    list tmp(std::move(rhs));
+    rhs.take_over(*this);
+    take_over(tmp);
+  }
 
   class iterator
   {
@@ -83,10 +98,14 @@
   void push_front(T x)
   {
     list_node* n = new list_node(std::move(x));
-    n->next = head_.next;
-    n->next->prev = n;
-    head_.next = n;
-    n->prev = &head_;
+    insert_node(head_.next, n);
+    size_++;
+  }
+
+  void push_back(const T& x)
+  {
+    list_node* n = new list_node(x);
+    insert_node(&head_, n);
     size_++;
   }
 
@@ -99,9 +118,42 @@
   struct list_node : list_node_base
   {
     T value_;
+    list_node(const T& x) : value_(x) {}
     list_node(T&& x) : value_(std::move(x)) {}
   };
 
+  void insert_node(list_node_base* pos, list_node* n)
+  {
+    n->next = pos;
+    n->prev = pos->prev;
+    pos->prev->next = n;
+    pos->prev = n;
+  }
+
+  void init_head()
+  {
+    head_.next = &head_;
+    head_.prev = &head_;
+  }
+
+  void take_over(list& rhs)
+  {
+    assert(size_ == 0);
+    assert(head_.next == &head_);
+    assert(head_.prev == &head_);
+
+    if (rhs.size_ > 0)
+    {
+      head_.next = rhs.head_.next;
+      head_.prev = rhs.head_.prev;
+      head_.next->prev = &head_;
+      head_.prev->next = &head_;
+      rhs.init_head();
+      size_ = rhs.size_;
+      rhs.size_ = 0;
+    }
+  }
+
   list_node_base head_;
   size_t size_ = 0;
 };
@@ -118,14 +170,16 @@
   leanstl::list<int> li;
   li.push_front(43);
   li.push_front(82);
+  li.push_back(19);
 
-  for (auto x : li)
-    printf("%d\n", x);
-
-  const leanstl::list<int>& lic(li);
+  leanstl::list<int> lic(li);
   for (auto x : lic)
     printf("%d\n", x);
 
+  leanstl::list<int> lim(std::move(li));
+
+  lic = lim;
+
   leanstl::list<std::string> ls;
   ls.push_front("hello");
   printf("front=%s\n", ls.front().c_str());

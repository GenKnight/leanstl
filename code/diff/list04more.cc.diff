--- list04.cc
+++ list04more.cc
@@ -4,7 +4,7 @@
 
 #include <assert.h>  // for size_t
 #include <stddef.h>  // for size_t
-#include <utility>   // for std::move
+#include <utility>   // for std::move and initializer_list
 
 namespace leanstl
 {
@@ -58,14 +58,7 @@
     }
   }
 
-  list(const list& rhs)
-  {
-    for (const T& x: rhs)
-    {
-      push_back(x);
-    }
-  }
-
+  list(const list& rhs) : list(rhs.begin(), rhs.end()) {}
   list(list&& rhs) { take_over(rhs); }
   list& operator=(list rhs) { swap(rhs); return *this; }
 
@@ -82,6 +75,14 @@
       push_back(value);
   }
 
+  template <typename InputIterator>
+  list(InputIterator first, InputIterator last)
+  {
+    initialize(first, last, typename std::is_integral<InputIterator>::type());
+  }
+
+  list(std::initializer_list<T> il) : list(il.begin(), il.end()) {}
+
   void swap(list& rhs)
   {
     list tmp(std::move(rhs));
@@ -184,6 +185,20 @@
       rhs.size_ = 0;
     }
   }
+
+  template <typename InputIterator>
+  void initialize(InputIterator first, InputIterator last, std::false_type)
+  {
+    for (; first != last; ++first)
+      push_back(*first);
+  }
+
+  template <typename Integer>
+  void initialize(Integer n, Integer value, std::true_type)
+  {
+    for (size_t i = 0; i < n; ++i)
+      push_back(value);
+  }
 };
 
 }  // namespace leanstl
@@ -195,7 +210,7 @@
 
 int main()
 {
-  leanstl::list<int> li(3);
+  leanstl::list<int> li(3, 8);
   li.push_front(43);
   li.push_front(82);
   li.push_back(19);
@@ -208,6 +223,11 @@
 
   lic = lim;
 
+  int arr[3] = { 1, 2, 3};
+  leanstl::list<int> lia(arr, arr+3);
+  for (auto x : lia)
+    printf("%d\n", x);
+
   leanstl::list<std::string> ls;
   ls.push_front("hello");
   printf("front=%s\n", ls.front().c_str());
